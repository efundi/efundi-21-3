diff --git a/cmprovider/pom.xml b/cmprovider/pom.xml
index baf8a69..ac96a28 100644
--- a/cmprovider/pom.xml
+++ b/cmprovider/pom.xml
@@ -88,6 +88,13 @@
           <include>*.properties</include>
         </includes>
       </resource>
+      <resource>
+      	<directory>${basedir}/src/java</directory>
+        <includes>
+        	<include>**/*.properties</include>
+        </includes>
+        <filtering>false</filtering>
+      </resource>
     </resources>
   </build>
 </project>
diff --git a/cmprovider/src/java/nwu-cm.properties b/cmprovider/src/java/nwu-cm.properties
new file mode 100644
index 0000000..d47e312
--- /dev/null
+++ b/cmprovider/src/java/nwu-cm.properties
@@ -0,0 +1,26 @@
+# this defines the entity description for NWU CM
+nwu-cm = Represents NWU Course Management
+nwu-cm.action.insert-cm-data = Allows the Administrator to create Course Management data by posting to the url /nwu-cm/insert-cm-data. <br />\
+This is done by passing a set of post parameters which will be used to create Course Management data. These parameters includes: <br />\
+use "year" (String, required) the year for which to insert the data <br />\
+use "courseCode" (String, required) for course code of the module (eg. AFNL) <br />\
+use "canonicalCourseRef" (String, required) for canonical course reference of the module (eg. AFNL 111) <br />\
+use "courseOfferingRef" (String, required) for course offering reference of the module (eg. AFNL 111 P 2011) <br />\
+use "enrollmentSetRef" (String, required) for course offering enrollment set reference of the module (eg. AFNL 111 P 2011 ES) <br />\
+use "lecturerUserName" (String, required) The lecturer user name that will be unlinked from this module <br />\
+use "studentUserNames" A comma delimited string of the student user names linked to this module. <br />\
+If the the post is successful, a string value of "success" will be returned.
+nwu-cm.action.delete-cm-data = Allows the Administrator to delete Course Management data by posting to the url /nwu-cm/delete-cm-data. <br />\
+This is done by passing a set of post parameters which will be used to delete Course Management data. These parameters includes: <br />\
+use "year" (String, required) the year for which to delete the CM data <br />\
+use "courseCode" (String, required) for course code of the module (eg. AFNL) <br />\
+use "canonicalCourseRef" (String, required) for canonical course reference of the module (eg. AFNL 111) <br />\
+use "courseOfferingRef" (String, required) for course offering reference of the module (eg. AFNL 111 P 2011) <br />\
+use "enrollmentSetRef" (String, required) for course offering enrollment set reference of the module (eg. AFNL 111 P 2011 ES) <br />\
+use "lecturerUserName" (String, required) The lecturer user name that will be unlinked from this module <br />\
+use "studentUserNames" A comma delimited string of the student user names linked to this module. <br />\
+use "courseSetExists" (boolean, true/false) A boolean indicating whether a non deleted course set (eg. AFNL) exists. (any lecturer + in any year). <br />\
+use "canonicalCourseExists" (boolean, true/false) A boolean indicating whether a non deleted canonical course (eg. AFNL 111) exists. (any lecturer + in any year). <br />\
+use "courseOfferingExists" (boolean, true/false) A boolean indicating whether a non deleted course offering (eg. AFNL 111 P 2011) exists. (for other lecturers). <br />\
+use "onlyDeletedModulesExist" (boolean, true/false) A boolean indicating whether only deleted modules (modules with deleted status) exists for the year. <br />\
+If the the post is successful, a string value of "success" will be returned.
diff --git a/cmprovider/src/java/org/sakaiproject/cmprovider/NWUCmEntityProvider.java b/cmprovider/src/java/org/sakaiproject/cmprovider/NWUCmEntityProvider.java
new file mode 100644
index 0000000..04af9cb
--- /dev/null
+++ b/cmprovider/src/java/org/sakaiproject/cmprovider/NWUCmEntityProvider.java
@@ -0,0 +1,594 @@
+package org.sakaiproject.cmprovider;
+
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Scanner;
+import java.util.Set;
+
+import javax.naming.NamingException;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.authz.api.AuthzGroupService;
+import org.sakaiproject.cmprovider.utility.LDAPRetrieval;
+import org.sakaiproject.cmprovider.utility.RosterUser;
+import org.sakaiproject.component.api.ServerConfigurationService;
+import org.sakaiproject.coursemanagement.api.AcademicSession;
+import org.sakaiproject.coursemanagement.api.CourseManagementAdministration;
+import org.sakaiproject.coursemanagement.api.CourseManagementService;
+import org.sakaiproject.coursemanagement.api.CourseOffering;
+import org.sakaiproject.coursemanagement.api.EnrollmentSet;
+import org.sakaiproject.coursemanagement.api.SectionCategory;
+import org.sakaiproject.coursemanagement.api.exception.IdNotFoundException;
+import org.sakaiproject.entitybroker.DeveloperHelperService;
+import org.sakaiproject.entitybroker.EntityView;
+import org.sakaiproject.entitybroker.entityprovider.annotations.EntityCustomAction;
+import org.sakaiproject.entitybroker.entityprovider.capabilities.ActionsExecutable;
+import org.sakaiproject.entitybroker.entityprovider.capabilities.AutoRegisterEntityProvider;
+import org.sakaiproject.entitybroker.entityprovider.capabilities.Describeable;
+import org.sakaiproject.tool.api.SessionManager;
+import org.sakaiproject.user.api.UserDirectoryService;
+
+public class NWUCmEntityProvider implements AutoRegisterEntityProvider, ActionsExecutable, Describeable {
+
+	public final static String PREFIX = "nwu-cm";
+
+	private static Log log = LogFactory.getLog(NWUCmEntityProvider.class);
+
+	protected CourseManagementService cmService;
+
+	protected CourseManagementAdministration cmAdmin;
+
+	protected DeveloperHelperService developerService;
+
+	private UserDirectoryService userDirectoryService;
+
+	private ServerConfigurationService serverConfigurationService;
+
+	protected AuthzGroupService authzGroupService;
+
+	protected SessionManager sessionManager;
+
+	private LDAPRetrieval ldapRetrieval;	
+	
+	public void init() {
+    }
+
+	@Override
+	public String getEntityPrefix() {
+		return PREFIX;
+	}
+
+	/**
+	 * Insert the Sakai Course Management Data
+	 * 
+	 * @param year
+	 *            The year for which to insert the data
+	 * @param courseCode
+	 *            The course code of the module. (eg. AFNL)
+	 * @param canonicalCourseRef
+	 *            The canonical course reference of the module (eg. AFNL 111)
+	 * @param courseOfferingRef
+	 *            The course offering reference of the module (eg. AFNL 111 P 2011)
+	 * @param enrollmentSetRef
+	 *            The course offering enrollment set reference of the module (eg. AFNL 111 P 2011 ES)
+	 * @param lecturerUserName
+	 *            The lecturer user name linked to this module.
+	 * @param studentUserNames
+	 *            A comma delimited string of the student user names linked to this module.
+	 * @return A string indicating whether this call was successful.
+	 */
+	@EntityCustomAction(action = "insert-cm-data", viewKey = "")
+	public String handleinsertCMData(EntityView view, Map<String, Object> params) {
+		log.info("SakaiCM REST Web Service - performing insertCMData");
+		
+		String yearStr = (String) params.get("year");
+		if (StringUtils.isBlank(yearStr)) {
+			throw new IllegalArgumentException("year must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+
+		int year;
+		try {
+			year = Integer.parseInt(yearStr);
+		} catch (NumberFormatException e) {
+			throw new IllegalArgumentException("year must be a numeric parseable value, via the URL /nwu-cm/insert-cm-data");
+		}
+
+		String courseCode = (String) params.get("courseCode");
+		if (StringUtils.isBlank(courseCode)) {
+			throw new IllegalArgumentException(
+					"courseCode must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String canonicalCourseRef = (String) params.get("canonicalCourseRef");
+		if (StringUtils.isBlank(canonicalCourseRef)) {
+			throw new IllegalArgumentException(
+					"canonicalCourseRef must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String courseOfferingRef = (String) params.get("courseOfferingRef");
+		if (StringUtils.isBlank(courseOfferingRef)) {
+			throw new IllegalArgumentException(
+					"courseOfferingRef must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String enrollmentSetRef = (String) params.get("enrollmentSetRef");
+		if (StringUtils.isBlank(enrollmentSetRef)) {
+			throw new IllegalArgumentException(
+					"enrollmentSetRef must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String lecturerUserName = (String) params.get("lecturerUserName");
+		if (StringUtils.isBlank(lecturerUserName)) {
+			throw new IllegalArgumentException(
+					"lecturerUserName must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String studentUserNames = (String) params.get("studentUserNames");
+
+		List<String> studentUserNamesList = new ArrayList<String>();
+		Scanner scanner = new Scanner(studentUserNames);
+		scanner.useDelimiter(",");
+		while (scanner.hasNext()) {
+			studentUserNamesList.add(scanner.next());
+		}
+		AcademicSession academicSession = createAcademicSession(year);
+		createCourseSets(courseCode, lecturerUserName);
+		createCanonicalCourses(canonicalCourseRef);
+		createCourseOfferingRelatedData(academicSession, courseCode, canonicalCourseRef, courseOfferingRef, enrollmentSetRef,
+				lecturerUserName, studentUserNamesList);
+		// Insert/Update students/lecturers
+		createSakaiUsers(lecturerUserName, studentUserNamesList);
+		log.info("SakaiCM REST Web Service - insertCMData ended successfully");
+
+		return "success";
+	}
+
+	private void createSakaiUsers(String lecturerUserName, List<String> studentUserNames) {
+		if (serverConfigurationService.getBoolean("nwu.cm.users.create", false)) {
+			try {
+				// Lecturers
+				String lecturerFilter = serverConfigurationService.getString("ldap.lecturer.filter",
+						"(memberOf=cn=efundi-instructors,ou=orgunits,ou=groups,o=nwu)");
+				RosterUser lecturer = new RosterUser(lecturerUserName);
+				getLDAPRetrieval().setRosterUserDetails(lecturer, lecturerFilter);
+				createRosterSakaiUser(lecturer);
+				// Students
+				List<RosterUser> students = new ArrayList<RosterUser>();
+				for (String studentUserName : studentUserNames) {
+					students.add(new RosterUser(studentUserName));
+				}
+				String studentFilter = serverConfigurationService.getString("ldap.student.filter",
+						"(memberOf=cn=s,ou=orgunits,ou=groups,o=nwu)");
+				if (students != null && !students.isEmpty()) {
+					getLDAPRetrieval().setRosterUserDetails(students, studentFilter);
+					createRosterSakaiUsers(students);
+				}
+			} catch (Exception e) {
+				log.error(
+						"SakaiCM REST Web Service - Could not create Sakai Users for Course Management. See previous log entries for more details.");
+			} finally {
+				try {
+					getLDAPRetrieval().getContext().close();
+				} catch (NamingException e) {
+					log.warn("SakaiCM REST Web Service - Error closing LDAPRetrieval Context", e);
+				}
+			}
+		}
+	}
+
+	/**
+	 * Create the AcademicSession for the year and set it active/current
+	 */
+	private AcademicSession createAcademicSession(int year) {
+		Calendar start = Calendar.getInstance();
+		start.set(Calendar.YEAR, year);
+		start.set(Calendar.MONTH, 0);
+		start.set(Calendar.DAY_OF_MONTH, 1);
+		Calendar end = Calendar.getInstance();
+		end.set(Calendar.YEAR, year);
+		end.set(Calendar.MONTH, 11);
+		end.set(Calendar.DAY_OF_MONTH, 31);
+		String title = MessageFormat.format(
+				serverConfigurationService.getString("nwu.cm.AcademicSession.title", "Year {0,number,####}"),
+				start.get(Calendar.YEAR));
+		String description = MessageFormat.format(serverConfigurationService.getString("nwu.cm.AcademicSession.description",
+				"Academic Session for Year {0,number,####}"), start.get(Calendar.YEAR));
+		AcademicSession academicSession = null;
+		try {
+			academicSession = cmService.getAcademicSession(title);
+			log.info("SakaiCM REST Web Service - Retrieved AcademicSession with id " + title);
+		} catch (IdNotFoundException e) {
+			// If AcademicSession do not exist, create it.
+			academicSession = cmAdmin.createAcademicSession(title, title, description, start.getTime(), end.getTime());
+			log.info("SakaiCM REST Web Service - Inserted AcademicSession with id " + title);
+		}
+		List<String> acadSessionIds = new ArrayList<String>();
+		List<AcademicSession> allAcadSessions = cmService.getAcademicSessions();
+		for (AcademicSession availableAcadSession : allAcadSessions) {
+			acadSessionIds.add(availableAcadSession.getEid());
+		}
+		cmAdmin.setCurrentAcademicSessions(acadSessionIds);
+		return academicSession;
+	}
+
+	/**
+	 * Create Course Sets for all the subject codes. These are shown in the 'Subject' droplist of Sakai's course site setup.
+	 */
+	private void createCourseSets(String courseCode, String lecturerUserName) {
+		String category = serverConfigurationService.getString("nwu.cm.CourseSet.category", "category");
+		if (!cmService.isCourseSetDefined(courseCode)) {
+			cmAdmin.createCourseSet(courseCode, courseCode, courseCode, category, null);
+			log.info("SakaiCM REST Web Service - Inserted CourseSet with id " + courseCode);
+		}
+	}
+
+	/**
+	 * These abstract records are not shown on screen.
+	 */
+	private void createCanonicalCourses(String canonicalCourseRef) {
+		if (!cmService.isCanonicalCourseDefined(canonicalCourseRef)) {
+			cmAdmin.createCanonicalCourse(canonicalCourseRef, canonicalCourseRef, canonicalCourseRef);
+			log.info("SakaiCM REST Web Service - Inserted CanonicalCourse with id " + canonicalCourseRef);
+		}
+	}
+
+	/**
+	 * The Course Offering records are shown in the 'Course' droplist of Sakai's course site setup.
+	 */
+	private void createCourseOfferingRelatedData(AcademicSession academicSession, String courseCode, String canonicalCourseRef,
+			String courseOfferingRef, String enrollmentSetRef, String lecturerUserName, List<String> studentUserNames) {
+		String status = serverConfigurationService.getString("nwu.cm.CourseOffering.status", "Active");
+		String enrollmentSetCategory = serverConfigurationService.getString("nwu.cm.EnrollmentSet.category", "category");
+		String enrollmentSetCredits = serverConfigurationService.getString("nwu.cm.EnrollmentSet.credits", "0");
+		String enrollmentStatus = serverConfigurationService.getString("nwu.cm.Enrollment.status", "enrolled");
+		String enrollmentCredits = serverConfigurationService.getString("nwu.cm.Enrollment.credits", "0");
+		String gradingScheme = serverConfigurationService.getString("nwu.cm.Enrollment.gradingScheme", "standard");
+		String sectionCategoryCode = createSectionCategory();
+		String sectionStatus = serverConfigurationService.getString("nwu.cm.Section.Membership.status", "Active");
+		String sectionLecturerRole = serverConfigurationService.getString("nwu.cm.Section.lecturer.role", "I");
+		String sectionStudentRole = serverConfigurationService.getString("nwu.cm.Section.student.role", "S");
+		if (!cmService.isCourseOfferingDefined(courseOfferingRef)) {
+			// Give Canonical Course's Eid as title for Course Offering
+			cmAdmin.createCourseOffering(courseOfferingRef, canonicalCourseRef, courseOfferingRef, status,
+					academicSession.getEid(), canonicalCourseRef, academicSession.getStartDate(), academicSession.getEndDate());
+			log.info("SakaiCM REST Web Service - Inserted CourseOffering with id " + courseOfferingRef);
+		}
+		addCourseOfferingsToCourseSets(courseOfferingRef, courseCode);
+		// Add EnrollmentSets
+		createEnrollmentSets(courseOfferingRef, enrollmentSetCategory, enrollmentSetCredits, enrollmentSetRef, lecturerUserName);
+		// Add Enrollments
+		createEnrollment(enrollmentSetRef, studentUserNames, enrollmentStatus, enrollmentCredits, gradingScheme);
+		// Add Sections
+		createSections(courseOfferingRef, lecturerUserName, studentUserNames, sectionCategoryCode, sectionStatus,
+				sectionLecturerRole, sectionStudentRole, enrollmentSetRef);
+	}
+
+	private void addCourseOfferingsToCourseSets(String courseOfferingRef, String courseSetId) {
+		boolean linkExists = false;
+		// Check if Offering is already linked to CourseSet
+		Set<CourseOffering> linkedOfferings = cmService.getCourseOfferingsInCourseSet(courseSetId);
+		for (CourseOffering linkedOffering : linkedOfferings) {
+			if (isEqual(linkedOffering.getEid(), courseOfferingRef)) {
+				log.info("SakaiCM REST Web Service - CourseOffering with id '" + courseOfferingRef
+						+ "' is already linked to CourseSet with id '" + courseSetId + "'.");
+				linkExists = true;
+				break;
+			}
+		}
+		if (!linkExists) {
+			// Add if Offering is not already linked.
+			cmAdmin.addCourseOfferingToCourseSet(courseSetId, courseOfferingRef);
+			log.info("SakaiCM REST Web Service - Added CourseOffering (" + courseOfferingRef + ") to CourseSet (" + courseSetId + ")");
+		}
+	}
+
+	/**
+	 * Arbitrary section category title.
+	 */
+	private String createSectionCategory() {
+		String sectionCategoryCode = null;
+		String category = serverConfigurationService.getString("nwu.cm.SectionCategory.category", "LCT");
+		String catDesc = serverConfigurationService.getString("nwu.cm.SectionCategory.description", "Lecture");
+		boolean exists = false;
+		for (String categoryCode : cmService.getSectionCategories()) {
+			if (category.equals(categoryCode)) {
+				if (catDesc.equals(cmService.getSectionCategoryDescription(category))) {
+					sectionCategoryCode = categoryCode;
+					log.info("SakaiCM REST Web Service - Section Category '" + category + "' already exists.");
+					exists = true;
+					break;
+				}
+			}
+		}
+		if (!exists) {
+			SectionCategory sectionCategory = cmAdmin.addSectionCategory(category, catDesc);
+			sectionCategoryCode = sectionCategory.getCategoryCode();
+			log.info("SakaiCM REST Web Service - Section Category (" + category + " - " + catDesc + ") successfully inserted.");
+		}
+		return sectionCategoryCode;
+	}
+
+	/**
+	 * Creates the EnrollmentSets per CourseOffering/Class Group.
+	 */
+	private void createEnrollmentSets(String courseOfferingRef, String enrollmentSetCategory, String enrollmentSetCredits,
+			String enrollmentSetRef, String lecturerUserName) {
+		if (!cmService.isEnrollmentSetDefined(enrollmentSetRef)) {
+			Set<String> lecturers = new HashSet<String>();
+			lecturers.add(lecturerUserName);
+			cmAdmin.createEnrollmentSet(enrollmentSetRef, enrollmentSetRef, enrollmentSetRef, enrollmentSetCategory,
+					enrollmentSetCredits, courseOfferingRef, lecturers);
+			log.info("SakaiCM REST Web Service - Inserted EnrollmentSet with id " + enrollmentSetRef);
+		}
+	}
+
+	/**
+	 * Only students should have Enrollments. Lecturers are added to the EnrollmentSet.
+	 */
+	private void createEnrollment(String enrollmentSetRef, List<String> studentUserNames, String enrollmentStatus,
+			String enrollmentCredits, String gradingScheme) {
+		for (String studentUserName : studentUserNames) {
+			cmAdmin.addOrUpdateEnrollment(studentUserName, enrollmentSetRef, enrollmentStatus, enrollmentCredits, gradingScheme);
+			log.info("SakaiCM REST Web Service - Added/Updated Enrollment for user id " + studentUserName);
+		}
+	}
+
+	/**
+	 * The Section's description is displayed (with checkbox) on the Course/Section Information screen of Sakai's course site
+	 * setup.
+	 */
+	private void createSections(String courseOfferingRef, String lecturerUserName, List<String> studentUserNames,
+			String sectionCategoryCode, String sectionStatus, String sectionLecturerRole, String sectionStudentRole,
+			String enrollmentSetRef) {
+		// Section's make use of the same eids as CourseOfferings.
+		if (!cmService.isSectionDefined(courseOfferingRef)) {
+			cmAdmin.createSection(courseOfferingRef, courseOfferingRef, courseOfferingRef + " Lecture", sectionCategoryCode, null,
+					courseOfferingRef, enrollmentSetRef);
+			log.info("SakaiCM REST Web Service - Inserted Section with id " + courseOfferingRef);
+		}
+		// Add Section Memberships
+		createSectionMemberships(courseOfferingRef, lecturerUserName, studentUserNames, sectionStatus, sectionLecturerRole,
+				sectionStudentRole);
+	}
+
+	private void createSectionMemberships(String courseOfferingRef, String lecturerUserName, List<String> studentUserNames,
+			String sectionStatus, String sectionLecturerRole, String sectionStudentRole) {
+		// Students
+		for (String studentUserName : studentUserNames) {
+			cmAdmin.addOrUpdateSectionMembership(studentUserName, sectionStudentRole, courseOfferingRef, sectionStatus);
+			log.info("SakaiCM REST Web Service - Added/Updated SectionMembership - " + studentUserName + " to " + courseOfferingRef);
+		}
+	}
+
+	private LDAPRetrieval getLDAPRetrieval() {
+		if (ldapRetrieval == null) {
+			ldapRetrieval = new LDAPRetrieval(serverConfigurationService);
+		}
+		return ldapRetrieval;
+	}
+
+	private void createRosterSakaiUser(RosterUser rosterUser) {
+		List<RosterUser> rosterUsers = new ArrayList<RosterUser>();
+		rosterUsers.add(rosterUser);
+		createRosterSakaiUsers(rosterUsers);
+	}
+
+	private void createRosterSakaiUsers(List<RosterUser> rosterUsers) {
+		try {
+			for (RosterUser rosterUser : rosterUsers) {
+				String userId = null;
+				try {
+					userId = userDirectoryService.getUserId(rosterUser.getUserName());
+				} catch (Exception e1) {
+					userId = "";
+				}
+				boolean userExists = userId != null && !userId.equals("");
+				if (userExists) {
+					log.info("SakaiCM REST Web Service - User " + rosterUser.getUserName() + " already exists.");
+				} else {
+					userDirectoryService.addUser(null, rosterUser.getUserName(), rosterUser.getFirstName(),
+							rosterUser.getSurname(), rosterUser.getEmail(), rosterUser.getPassword(), "maintain", null);
+					log.info("SakaiCM REST Web Service - Added user " + rosterUser.getUserName());
+				}
+			}
+		} catch (Exception e) {
+			log.error("SakaiCM REST Web Service - createRosterSakaiUsers - Exception occurred: ", e);
+		}
+	}
+
+	/**
+	 * Delete the Sakai Course Management data.
+	 * 
+	 * @param year
+	 *            The year for which to delete the CM data
+	 * @param courseCode
+	 *            The course code of the module. (eg. AFNL)
+	 * @param canonicalCourseRef
+	 *            The canonical course reference of the module (eg. AFNL 111)
+	 * @param courseOfferingRef
+	 *            The course offering reference of the module (eg. AFNL 111 P 2011)
+	 * @param enrollmentSetRef
+	 *            The enrollment set reference of the module (eg. AFNL 111 P 2011 ES)
+	 * @param lecturerUserName
+	 *            The lecturer user name that will be unlinked from this module.
+	 * @param studentUserNames
+	 *            A comma delimited string of student user names that will be unlinked from this module.
+	 * @param courseSetExists
+	 *            A boolean indicating whether a non deleted course set (eg. AFNL) exists. (any lecturer + in any year).
+	 * @param canonicalCourseExists
+	 *            A boolean indicating whether a non deleted canonical course (eg. AFNL 111) exists. (any lecturer + in any year).
+	 * @param courseOfferingExists
+	 *            A boolean indicating whether a non deleted course offering (eg. AFNL 111 P 2011) exists. (for other lecturers).
+	 * @param onlyDeletedModulesExist
+	 *            A boolean indicating whether only deleted modules (modules with deleted status) exists for the year.
+	 * @return A string indicating whether this call was successful.
+	 */
+	
+	@EntityCustomAction(action = "delete-cm-data", viewKey = "")
+	public String handledeleteCMData(EntityView view, Map<String, Object> params) {
+		log.info("SakaiCM REST Web Service - performing deleteCMData");
+
+		String yearStr = (String) params.get("year");
+		if (StringUtils.isBlank(yearStr)) {
+			throw new IllegalArgumentException("year must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+
+		int year;
+		try {
+			year = Integer.parseInt(yearStr);
+		} catch (NumberFormatException e) {
+			throw new IllegalArgumentException("year must be a numeric parseable value, via the URL /nwu-cm/insert-cm-data");
+		}
+
+		String courseCode = (String) params.get("courseCode");
+		if (StringUtils.isBlank(courseCode)) {
+			throw new IllegalArgumentException(
+					"courseCode must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String canonicalCourseRef = (String) params.get("canonicalCourseRef");
+		if (StringUtils.isBlank(canonicalCourseRef)) {
+			throw new IllegalArgumentException(
+					"canonicalCourseRef must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String courseOfferingRef = (String) params.get("courseOfferingRef");
+		if (StringUtils.isBlank(courseOfferingRef)) {
+			throw new IllegalArgumentException(
+					"courseOfferingRef must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String enrollmentSetRef = (String) params.get("enrollmentSetRef");
+		if (StringUtils.isBlank(enrollmentSetRef)) {
+			throw new IllegalArgumentException(
+					"enrollmentSetRef must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String lecturerUserName = (String) params.get("lecturerUserName");
+		if (StringUtils.isBlank(lecturerUserName)) {
+			throw new IllegalArgumentException(
+					"lecturerUserName must be set in order to create CM data, via the URL /nwu-cm/insert-cm-data");
+		}
+		String studentUserNames = (String) params.get("studentUserNames");		
+		String courseSetExistsObj = (String) params.get("courseSetExists");		
+		boolean courseSetExists = Boolean.getBoolean(courseSetExistsObj);
+		
+		String canonicalCourseExistsObj = (String) params.get("canonicalCourseExists");
+		boolean canonicalCourseExists  = Boolean.getBoolean(canonicalCourseExistsObj);
+		
+		String courseOfferingExistsObj = (String) params.get("courseOfferingExists");
+		boolean courseOfferingExists = Boolean.getBoolean(courseOfferingExistsObj);
+		
+		String onlyDeletedModulesExistObj = (String) params.get("onlyDeletedModulesExist");
+		boolean onlyDeletedModulesExist = Boolean.getBoolean(onlyDeletedModulesExistObj);						
+		
+		// Remove in reverse order to avoid foreign key data problems
+		List<String> studentUserNamesList = new ArrayList<String>();
+		Scanner scanner = new Scanner(studentUserNames);
+		scanner.useDelimiter(",");
+		while (scanner.hasNext()) {
+			studentUserNamesList.add(scanner.next());
+		}
+		deleteCourseOfferingRelatedData(courseCode, courseOfferingRef, enrollmentSetRef, lecturerUserName,
+				courseOfferingExists, studentUserNamesList);
+		deleteCanonicalCourses(canonicalCourseRef, canonicalCourseExists);
+		deleteCourseSets(courseCode, courseSetExists);
+		// If only deleted data exists for this year, delete the AcademicSession.
+		if (onlyDeletedModulesExist) {
+			deleteAcademicSession(year);
+		}
+		log.info("SakaiCM REST Web Service - deleteCMData has finished successfully");
+		return "success";
+	}
+
+	private void deleteCourseOfferingRelatedData(String courseCode, String courseOfferingRef, String enrollmentSetRef,
+			String lecturerUserName, boolean courseOfferingExists, List<String> studentUserNames) {
+		// Lecturers shouldn't have enrollments. They are linked to the EnrollmentSet.
+		// Remove lecturer from EnrollmentSet
+		if (cmService.isEnrollmentSetDefined(enrollmentSetRef)) {
+			EnrollmentSet enrollmentSet = cmService.getEnrollmentSet(enrollmentSetRef);
+			Set<String> instructors = enrollmentSet.getOfficialInstructors();
+			for (String instructor : instructors) {
+				if (isEqual(instructor, lecturerUserName)) {
+					instructors.remove(instructor);
+					break;
+				}
+			}
+			enrollmentSet.setOfficialInstructors(instructors);
+			cmAdmin.updateEnrollmentSet(enrollmentSet);
+			log.info("SakaiCM REST Web Service - Removed Lecturer from EnrollmentSet: " + lecturerUserName + " - " + enrollmentSetRef);
+		}
+		// Students' membership/enrollment should only be removed when no same CourseOffering exists for another lecturer.
+		if (!courseOfferingExists) {
+			// Students
+			for (String studentUserName : studentUserNames) {
+				// Section Memberships
+				cmAdmin.removeSectionMembership(studentUserName, courseOfferingRef);
+				log.info("SakaiCM REST Web Service - Removed Student Membership from Section: " + studentUserName + " - "
+						+ courseOfferingRef);
+				// Enrollment
+				cmAdmin.removeEnrollment(studentUserName, enrollmentSetRef);
+				log.info("SakaiCM REST Web Service - Removed Student from Enrollment: " + studentUserName + " - " + enrollmentSetRef);
+			}
+			cmAdmin.removeCourseOfferingFromCourseSet(courseCode, courseOfferingRef);
+			log.info("SakaiCM REST Web Service - Removed CourseOffering from CourseSet: " + courseOfferingRef + " - " + courseCode);
+			// This also removes Sections and EnrollmentSets linked to the CourseOffering.
+			cmAdmin.removeCourseOffering(courseOfferingRef);
+			log.info("SakaiCM REST Web Service - Removed CourseOffering: " + courseOfferingRef);
+		}
+	}
+
+	private void deleteCanonicalCourses(String canonicalCourseRef, boolean canonicalCourseExists) {
+		// Canonical Courses are not year driven - must check db for test
+		if (!canonicalCourseExists) {
+			cmAdmin.removeCanonicalCourse(canonicalCourseRef);
+			log.info("SakaiCM REST Web Service - Removed CanonicalCourse: " + canonicalCourseRef);
+		}
+	}
+
+	private void deleteCourseSets(String courseCode, boolean courseSetExists) {
+		// Course Sets are not year driven - must check db for test
+		if (!courseSetExists) {
+			cmAdmin.removeCourseSet(courseCode);
+			log.info("SakaiCM REST Web Service - Removed CourseSet: " + courseCode);
+		}
+	}
+
+	private void deleteAcademicSession(final int year) {
+		String title = MessageFormat
+				.format(serverConfigurationService.getString("nwu.cm.AcademicSession.title", "Year {0,number,####}"), year);
+		if (!cmService.isAcademicSessionDefined(title)) {
+			cmAdmin.removeAcademicSession(title);
+			log.info("SakaiCM REST Web Service - Removed AcademicSession: " + title);
+		}
+	}
+
+	public static boolean isEqual(String a, String b) {
+		return a == null ? b == null : a.equals(b);
+	}
+	
+	public void setCmAdmin(CourseManagementAdministration admin) {
+		cmAdmin = admin;
+	}
+
+	public void setCmService(CourseManagementService service) {
+		cmService = service;
+	}
+
+	public void setAuthzGroupService(AuthzGroupService service) {
+		authzGroupService = service;
+	}
+
+	public void setDeveloperHelperService(DeveloperHelperService service) {
+		developerService = service;
+	}
+	
+	public void setUserDirectoryService(UserDirectoryService userDirectoryService) {
+        this.userDirectoryService = userDirectoryService;
+    }
+
+    public void setServerConfigurationService(ServerConfigurationService serverConfigurationService) {
+        this.serverConfigurationService = serverConfigurationService;
+    }
+
+	public void setSessionManager(SessionManager manager) {
+		sessionManager = manager;
+	}
+}
\ No newline at end of file
diff --git a/cmprovider/src/java/org/sakaiproject/cmprovider/utility/LDAPRetrieval.java b/cmprovider/src/java/org/sakaiproject/cmprovider/utility/LDAPRetrieval.java
new file mode 100644
index 0000000..59a0af1
--- /dev/null
+++ b/cmprovider/src/java/org/sakaiproject/cmprovider/utility/LDAPRetrieval.java
@@ -0,0 +1,218 @@
+package org.sakaiproject.cmprovider.utility;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+
+import javax.naming.Context;
+import javax.naming.NamingEnumeration;
+import javax.naming.NamingException;
+import javax.naming.directory.Attribute;
+import javax.naming.directory.Attributes;
+import javax.naming.directory.DirContext;
+import javax.naming.directory.InitialDirContext;
+import javax.naming.directory.SearchResult;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.component.api.ServerConfigurationService;
+
+public class LDAPRetrieval {
+
+    private final Log log = LogFactory.getLog(LDAPRetrieval.class);
+
+    private ServerConfigurationService serverConfigurationService;
+
+    private Properties ldapProperties;
+
+    private DirContext context;
+
+    private String baseURL;
+
+    public LDAPRetrieval(ServerConfigurationService serverConfigurationService) {
+        this.serverConfigurationService = serverConfigurationService;
+        configure(getLDAPProperties());
+    }
+
+    /**
+     * The following are mandatory:
+     * <ul>
+     * <li>java.naming.provider.url - e.g. "ldap://server_name_or_ip:port"</li>
+     * <li>za.globed.authenticator.expirytimeattr - the name of the attribute
+     * for the password expiry time.</li>
+     * <li>za.globed.authenticator.loginsleftattr - the name of the attribute
+     * for the number of logins left (after expiry).</li>
+     * </ul>
+     * The following are optional:
+     * <ul>
+     * <li>java.naming.factory.initial - overrides the LDAP context factory
+     * class.</li>
+     * <li>za.globed.authenticator.basedn - base DN limiting the searchable area
+     * of the tree.</li>
+     * </ul>
+     * 
+     * @param properties
+     *            see above for descriptions.
+     */
+    private void configure(Properties properties) throws IllegalArgumentException {
+        String providerURL = properties.getProperty(Context.PROVIDER_URL);
+        if (providerURL == null) {
+            throw new IllegalArgumentException("Missing " + Context.PROVIDER_URL);
+        }
+        baseURL = providerURL;
+        String baseDN = properties.getProperty("za.globed.authenticator.basedn");
+        if (baseDN != null) {
+            baseURL += "/" + baseDN;
+        }
+        String user = properties.getProperty("za.globed.authenticator.user");
+        String password = properties.getProperty("za.globed.authenticator.password");
+        String expiryTimeAN = properties.getProperty("za.globed.authenticator.expirytimeattr");
+        if (expiryTimeAN == null) {
+            throw new IllegalArgumentException("Missing za.globed.authenticator.expirytimeattr");
+        }
+        String loginsLeftAN = properties.getProperty("za.globed.authenticator.loginsleftattr");
+        if (loginsLeftAN == null) {
+            throw new IllegalArgumentException("Missing za.globed.authenticator.loginsleftattr");
+        }
+        String intruderattemptsAN = properties
+                .getProperty("za.globed.authenticator.loginintruderattempts");
+        if (intruderattemptsAN == null) {
+            throw new IllegalArgumentException(
+                    "Missing za.globed.authenticator.loginintruderattempts");
+        }
+        // Bind to test the configuration - re-used for future searches.
+        try {
+            Properties config = new Properties();
+            config.putAll(properties);
+            if ((user != null) && (user != "")) {
+                config.put(Context.SECURITY_PRINCIPAL, user);
+                config.put(Context.SECURITY_CREDENTIALS, password);
+                config.put(Context.SECURITY_AUTHENTICATION, "simple");
+            }
+            else {
+                config.put(Context.SECURITY_AUTHENTICATION, "none");
+            }
+            context = new InitialDirContext(config);
+        }
+        catch (NamingException configError) {
+            throw new IllegalArgumentException("Error configuring LDAPRetrieval.\n"
+                    + configError.getExplanation());
+        }
+    }
+
+    private Properties getLDAPProperties() {
+        if (ldapProperties == null) {
+            ldapProperties = new Properties();
+            ldapProperties
+                    .setProperty(Context.INITIAL_CONTEXT_FACTORY, serverConfigurationService
+                            .getString(Context.INITIAL_CONTEXT_FACTORY,
+                                "com.sun.jndi.ldap.LdapCtxFactory"));
+            ldapProperties.setProperty(Context.PROVIDER_URL, serverConfigurationService.getString(
+                Context.PROVIDER_URL, "ldap://v-ldp-lnx5.p.nwu.ac.za:389"));
+            ldapProperties
+                    .setProperty("za.globed.authenticator.user", serverConfigurationService
+                            .getString("za.globed.authenticator.user",
+                                "cn=sakaiadmin,ou=system-ids,o=nwu"));
+            ldapProperties.setProperty("za.globed.authenticator.password",
+                serverConfigurationService.getString("za.globed.authenticator.password",
+                    "OrenAxNew6"));
+            ldapProperties.setProperty("za.globed.authenticator.basedn", serverConfigurationService
+                    .getString("za.globed.authenticator.basedn", "ou=users,o=nwu"));
+            ldapProperties.setProperty("za.globed.authenticator.expirytimeattr",
+                serverConfigurationService.getString("za.globed.authenticator.expirytimeattr",
+                    "NWU-PasswordExpirationTime"));
+            ldapProperties.setProperty("za.globed.authenticator.loginsleftattr",
+                serverConfigurationService.getString("za.globed.authenticator.loginsleftattr",
+                    "loginGraceRemaining"));
+            ldapProperties.setProperty("za.globed.authenticator.loginintruderattempts",
+                serverConfigurationService.getString(
+                    "za.globed.authenticator.loginintruderattempts", "loginintruderattempts"));
+            ldapProperties.setProperty("ldap.firstname",
+                serverConfigurationService.getString("ldap.firstname", "givenName"));
+            ldapProperties.setProperty("ldap.surname",
+                serverConfigurationService.getString("ldap.surname", "sn"));
+            ldapProperties.setProperty("ldap.email",
+                serverConfigurationService.getString("ldap.email", "mail"));
+        }
+        return ldapProperties;
+    }
+
+    public void setRosterUserDetails(RosterUser rosterUser, String filter) throws Exception {
+        List<RosterUser> rosterUsers = new ArrayList<RosterUser>();
+        rosterUsers.add(rosterUser);
+        setRosterUserDetails(rosterUsers, filter);
+    }
+
+    public void setRosterUserDetails(List<RosterUser> rosterUsers, String filter) throws Exception {
+        try {
+            NamingEnumeration<SearchResult> results = context.search(baseURL
+                    + "??sub?"
+                    + getRosterUserFilter(filter, rosterUsers), null);
+            while (results.hasMoreElements()) {
+                SearchResult element = results.nextElement();
+                Attributes elementAttributes = element.getAttributes();
+                Attribute userName = elementAttributes.get("cn");
+                for (final RosterUser rosterUser : rosterUsers) {
+                    if (isEqual(rosterUser.getUserName(), (String) userName.get())) {
+                        rosterUser.setFirstName(getUserAttribute(elementAttributes,
+                            (String) context.getEnvironment().get("ldap.firstname")));
+                        rosterUser.setSurname(getUserAttribute(elementAttributes, (String) context
+                                .getEnvironment().get("ldap.surname")));
+                        rosterUser.setEmail(getUserAttribute(elementAttributes, (String) context
+                                .getEnvironment().get("ldap.email")));
+                        rosterUser.setFoundInLDAP(true);
+                        log.info("Set LDAP info for user " + rosterUser.getUserName());
+                        break;
+                    }
+                }
+            }
+            logRosterUserNotFoundWarnings(rosterUsers);
+        }
+        catch (Exception e) {
+            log.error("An exception occurred while searching for LDAP student users", e);
+            throw e;
+        }
+    }
+    
+    public static boolean isEqual(String a, String b) {
+        return a == null ? b == null : a.equals(b);
+    }
+
+    private String getUserAttribute(Attributes elementAttributes, String attributeId)
+            throws Exception {
+        Attribute attribute = elementAttributes.get(attributeId);
+        if (attribute != null) {
+            return (String) attribute.get();
+        }
+        return null;
+    }
+
+    private String getRosterUserFilter(String memberOfFilter, List<RosterUser> rosterUsers) {
+        StringBuilder filter = new StringBuilder("(&");
+        filter.append(memberOfFilter);
+        if (rosterUsers != null && !rosterUsers.isEmpty()) {
+            filter.append("(|");
+            for (RosterUser rosterUser : rosterUsers) {
+                filter.append("(");
+                filter.append("cn=");
+                filter.append(rosterUser.getUserName());
+                filter.append(")");
+            }
+            filter.append(")");
+        }
+        filter.append(")");
+        return filter.toString();
+    }
+
+    private void logRosterUserNotFoundWarnings(List<RosterUser> rosterUsers) {
+        for (RosterUser rosterUser : rosterUsers) {
+            if (!rosterUser.isFoundInLDAP()) {
+                log.warn("User with id " + rosterUser.getUserName() + " was not found in LDAP.");
+            }
+        }
+    }
+
+    public DirContext getContext() {
+        return context;
+    }
+}
diff --git a/cmprovider/src/java/org/sakaiproject/cmprovider/utility/RosterUser.java b/cmprovider/src/java/org/sakaiproject/cmprovider/utility/RosterUser.java
new file mode 100644
index 0000000..1ce32e7
--- /dev/null
+++ b/cmprovider/src/java/org/sakaiproject/cmprovider/utility/RosterUser.java
@@ -0,0 +1,68 @@
+package org.sakaiproject.cmprovider.utility;
+
+public class RosterUser {
+
+    private String userName;
+
+    private String firstName;
+
+    private String surname;
+
+    private String email;
+
+    private String password = "password";
+
+    private boolean foundInLDAP;
+
+    public RosterUser(String userName) {
+        this.userName = userName;
+    }
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getSurname() {
+        return surname;
+    }
+
+    public void setSurname(String surname) {
+        this.surname = surname;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public boolean isFoundInLDAP() {
+        return foundInLDAP;
+    }
+
+    public void setFoundInLDAP(boolean foundInLDAP) {
+        this.foundInLDAP = foundInLDAP;
+    }
+}
\ No newline at end of file
diff --git a/cmprovider/src/webapp/WEB-INF/components.xml b/cmprovider/src/webapp/WEB-INF/components.xml
index 4c4d65f..07af45c 100644
--- a/cmprovider/src/webapp/WEB-INF/components.xml
+++ b/cmprovider/src/webapp/WEB-INF/components.xml
@@ -41,4 +41,17 @@
 
   <bean id="org.sakaiproject.cmprovider.SectionCategoryEntityProvider"
     class="org.sakaiproject.cmprovider.SectionCategoryEntityProvider" parent="AbstractCmEntityProvider" />
+    
+  <bean id="NWUCmEntityProvider"
+    class="org.sakaiproject.cmprovider.NWUCmEntityProvider" init-method="init">
+    <property name="cmService" ref="org.sakaiproject.coursemanagement.api.CourseManagementService" />
+    <property name="cmAdmin" ref="org.sakaiproject.coursemanagement.api.CourseManagementAdministration" />
+    <property name="developerHelperService" ref="org.sakaiproject.entitybroker.DeveloperHelperService" />
+    <property name="userDirectoryService" ref="org.sakaiproject.user.api.UserDirectoryService" />
+    <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService" />
+    <property name="authzGroupService" ref="org.sakaiproject.authz.api.AuthzGroupService" />
+    <property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager" />
+  </bean>
+  
 </beans>
+
diff --git a/kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java b/kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java
index 55611f7..44811df 100644
--- a/kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java
+++ b/kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java
@@ -21,10 +21,36 @@
 
 package org.sakaiproject.authz.impl;
 
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Observable;
+import java.util.Observer;
+import java.util.Set;
+import java.util.Vector;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.sakaiproject.authz.api.*;
+import org.sakaiproject.authz.api.AuthzGroup;
+import org.sakaiproject.authz.api.GroupFullException;
+import org.sakaiproject.authz.api.GroupNotDefinedException;
+import org.sakaiproject.authz.api.Member;
+import org.sakaiproject.authz.api.MemberWithRoleId;
+import org.sakaiproject.authz.api.Role;
+import org.sakaiproject.authz.api.SimpleRole;
 import org.sakaiproject.db.api.SqlReader;
 import org.sakaiproject.db.api.SqlService;
 import org.sakaiproject.entity.api.Entity;
@@ -42,14 +68,6 @@
 import org.sakaiproject.util.BaseResourceProperties;
 import org.sakaiproject.util.BaseResourcePropertiesEdit;
 import org.sakaiproject.util.StringUtil;
-
-import java.sql.Connection;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.*;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
 
 /**
  * <p>
@@ -2835,6 +2853,13 @@
 								active = false;
 							}
 
+							for(UserAndRole uar : grants){
+								if(uar.userId.equals(userId)){
+		    						active = uar.active;
+		    						break;
+								}
+							}
+
 							toInsert.add(new UserAndRole(userId, role, active, true));
 						}
 					}
diff --git a/providers/cm-authz-provider/src/java/org/sakaiproject/coursemanagement/impl/provider/CourseManagementGroupProvider.java b/providers/cm-authz-provider/src/java/org/sakaiproject/coursemanagement/impl/provider/CourseManagementGroupProvider.java
index 53a09cc..9b00258 100644
--- a/providers/cm-authz-provider/src/java/org/sakaiproject/coursemanagement/impl/provider/CourseManagementGroupProvider.java
+++ b/providers/cm-authz-provider/src/java/org/sakaiproject/coursemanagement/impl/provider/CourseManagementGroupProvider.java
@@ -20,6 +20,7 @@
  **********************************************************************************/
 package org.sakaiproject.coursemanagement.impl.provider;
 
+import java.util.Set;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -29,10 +30,19 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.authz.api.AuthzGroupService;
 import org.sakaiproject.authz.api.GroupProvider;
+import org.sakaiproject.authz.api.Member;
 import org.sakaiproject.coursemanagement.api.CourseManagementService;
 import org.sakaiproject.coursemanagement.api.Section;
 import org.sakaiproject.coursemanagement.api.exception.IdNotFoundException;
+import org.sakaiproject.exception.IdUnusedException;
+import org.sakaiproject.site.api.Site;
+import org.sakaiproject.site.api.SiteService;
+import org.sakaiproject.tool.api.Placement;
+import org.sakaiproject.tool.api.Session;
+import org.sakaiproject.tool.api.SessionManager;
+import org.sakaiproject.tool.api.ToolManager;
 
 /**
  * A Sakai GroupProvider that utilizes the CourseManagementService and the
@@ -53,6 +63,10 @@
 
 	/** The course management service */
 	CourseManagementService cmService;
+	SiteService siteService;
+	ToolManager toolManager;
+	AuthzGroupService authzGroupService;
+	SessionManager sessionManager;
 			
 	/** The role resolvers to use when looking for CM roles in the hierarchy*/
 	List<RoleResolver> roleResolvers;
@@ -87,6 +101,9 @@
 		String[] sectionEids = unpackId(id);
 		if(log.isDebugEnabled()) log.debug(id + " is mapped to " + sectionEids.length + " sections");
 
+		Site currentSite = getCurrentSite();    
+		boolean isCreate = isCreate(currentSite);
+		
 		for (RoleResolver rr : roleResolvers) {
 			for(int i=0; i < sectionEids.length; i++) {
 				String sectionEid = sectionEids[i];
@@ -115,17 +132,77 @@
 					// Add or replace the role in the map if this is a more preferred role than the previous role
 					if(existingRole == null) {
 						if(log.isDebugEnabled()) log.debug("Adding "+ userEid + " to userRoleMap with role=" + rrRole);
-						userRoleMap.put(userEid, rrRole);
+						addUserAccordingToValidation(userRoleMap, currentSite,
+								isCreate, userEid, rrRole);
 					} else if(preferredRole(existingRole, rrRole).equals(rrRole)){
 						if(log.isDebugEnabled()) log.debug("Changing "+ userEid + "'s role in userRoleMap from " + existingRole + " to " + rrRole + " for section " + sectionEid);
-						userRoleMap.put(userEid, rrRole);
+						addUserAccordingToValidation(userRoleMap, currentSite,
+								isCreate, userEid, rrRole);
 					}
 				}
+				isCreate = false;
 			}
 		}
 		if(log.isDebugEnabled()) log.debug("_____________getUserRolesForGroup=" + userRoleMap);
 		return userRoleMap;
 	}
+	
+	private void addUserAccordingToValidation(Map<String, String> userRoleMap,
+            Site currentSite, boolean isCreate, String userEid, String rrRole) {
+        if(isCreate || isBusyWithLinkStudentsToSiteJob() || currentSite == null || isMemberOfCurrentSite(currentSite, userEid)){
+            userRoleMap.put(userEid, rrRole);
+        }
+    }   
+    
+    private boolean isBusyWithLinkStudentsToSiteJob() {
+        Session session = sessionManager.getCurrentSession();       
+        String sessionAttribute = (String) session.getAttribute("LinkStudentsToSiteJob");
+        if(sessionAttribute != null && sessionAttribute.equals("true")){
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isCreate(Site currentSite) {
+        if(currentSite != null){
+            Set<Member> siteMembers = currentSite.getMembers();
+            //during site create, only one user in list
+            if(siteMembers.size() == 1){
+                for (Member member : siteMembers) {
+                    if(currentSite.getCreatedBy().getEid().equals(member.getUserEid())){
+                        return true;
+                    }
+                }
+            }   
+        }
+        return false;
+    }
+
+    private boolean isMemberOfCurrentSite(Site currentSite, String userEid){
+        if(currentSite != null){
+            Set<Member> siteMembers = currentSite.getMembers();
+            for (Member member : siteMembers) {
+                if(userEid.equals(member.getUserEid())){
+                    return true;
+                }
+            }   
+        }
+        return false;
+    }
+
+    private Site getCurrentSite() {
+        Placement placement = toolManager.getCurrentPlacement();
+        if (placement == null) {
+            return null;
+        }
+        try {
+            return siteService.getSite(placement.getContext());
+
+        } catch (IdUnusedException e) {
+            log.warn("The current site could not be established.", e);
+            return null;
+        }
+    }
 
 	/**
 	 * Provides a map of Course Section EIDs (which can be used as AuthzGroup provider IDs)
@@ -236,6 +313,22 @@
 	public void setRoleResolvers(List<RoleResolver> roleResolvers) {
 		this.roleResolvers = roleResolvers;
 	}
+
+	public void setSiteService(SiteService siteService) {
+		this.siteService = siteService;
+	}
+
+	public void setToolManager(ToolManager toolManager) {
+		this.toolManager = toolManager;
+	}
+
+	public void setAuthzGroupService(AuthzGroupService authzGroupService) {
+		this.authzGroupService = authzGroupService;
+	}
+
+	public void setSessionManager(SessionManager sessionManager) {
+		this.sessionManager = sessionManager;
+	}
 	
 	public String preferredRole(String one, String other) {
 		int oneIndex = rolePreferences.indexOf(one);
diff --git a/providers/component/src/webapp/WEB-INF/components.xml b/providers/component/src/webapp/WEB-INF/components.xml
index c9a1513..93fd5c2 100644
--- a/providers/component/src/webapp/WEB-INF/components.xml
+++ b/providers/component/src/webapp/WEB-INF/components.xml
@@ -91,6 +91,10 @@
 				init-method="init"
 				destroy-method="destroy">
 				<property name="cmService" ref="org.sakaiproject.coursemanagement.api.CourseManagementService"/>
+				<property name="siteService" ref="org.sakaiproject.site.api.SiteService" />
+				<property name="toolManager" ref="org.sakaiproject.tool.api.ToolManager" />
+				<property name="authzGroupService" ref="org.sakaiproject.authz.api.AuthzGroupService" />
+				<property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager" />
 				<property name="configuration" ref="org.sakaiproject.coursemanagement.GroupProviderConfiguration"/>
 				<property name="roleResolvers">
 					<list>
